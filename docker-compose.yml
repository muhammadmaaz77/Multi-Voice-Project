version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: voice_ai_db
    environment:
      POSTGRES_DB: voice_ai_bot
      POSTGRES_USER: voice_ai_user
      POSTGRES_PASSWORD: secure_password_123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - voice_ai_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U voice_ai_user -d voice_ai_bot"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: voice_ai_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - voice_ai_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Voice AI Bot Backend
  backend:
    build: .
    container_name: voice_ai_backend
    environment:
      # API Keys (set in .env file)
      - GROQ_API_KEY=${GROQ_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ADMIN_KEY=${ADMIN_KEY}
      
      # Database Configuration
      - DATABASE_URL=postgresql://voice_ai_user:secure_password_123@db:5432/voice_ai_bot
      - REDIS_URL=redis://redis:6379/0
      
      # Mode Configuration
      - LOCAL_MODE=${LOCAL_MODE:-false}
      - ENABLE_MULTIPARTY=${ENABLE_MULTIPARTY:-true}
      - ENABLE_PERSISTENT_MEMORY=${ENABLE_PERSISTENT_MEMORY:-true}
      
      # Application Settings
      - MAX_SPEAKERS=${MAX_SPEAKERS:-4}
      - SESSION_TIMEOUT=${SESSION_TIMEOUT:-3600}
      - MEMORY_RETENTION_DAYS=${MEMORY_RETENTION_DAYS:-30}
    ports:
      - "8000:8000"
    volumes:
      - ./logs:/app/logs
      - ./static:/app/static
      - ./config:/app/config
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - voice_ai_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Nginx (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: voice_ai_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - backend
    networks:
      - voice_ai_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  voice_ai_network:
    driver: bridge
